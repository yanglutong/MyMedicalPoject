package com.yang.mymedicalpoject.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yang.mymedicalpoject.bean.ThreeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THREE_BEAN".
*/
public class ThreeBeanDao extends AbstractDao<ThreeBean, Long> {

    public static final String TABLENAME = "THREE_BEAN";

    /**
     * Properties of entity ThreeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Pic = new Property(2, String.class, "pic", false, "PIC");
        public final static Property Xian_price = new Property(3, float.class, "xian_price", false, "XIAN_PRICE");
        public final static Property Biao = new Property(4, boolean.class, "biao", false, "BIAO");
        public final static Property Zongjia = new Property(5, float.class, "zongjia", false, "ZONGJIA");
        public final static Property Count = new Property(6, int.class, "count", false, "COUNT");
    }


    public ThreeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ThreeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THREE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PIC\" TEXT," + // 2: pic
                "\"XIAN_PRICE\" REAL NOT NULL ," + // 3: xian_price
                "\"BIAO\" INTEGER NOT NULL ," + // 4: biao
                "\"ZONGJIA\" REAL NOT NULL ," + // 5: zongjia
                "\"COUNT\" INTEGER NOT NULL );"); // 6: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THREE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ThreeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(3, pic);
        }
        stmt.bindDouble(4, entity.getXian_price());
        stmt.bindLong(5, entity.getBiao() ? 1L: 0L);
        stmt.bindDouble(6, entity.getZongjia());
        stmt.bindLong(7, entity.getCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ThreeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(3, pic);
        }
        stmt.bindDouble(4, entity.getXian_price());
        stmt.bindLong(5, entity.getBiao() ? 1L: 0L);
        stmt.bindDouble(6, entity.getZongjia());
        stmt.bindLong(7, entity.getCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ThreeBean readEntity(Cursor cursor, int offset) {
        ThreeBean entity = new ThreeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pic
            cursor.getFloat(offset + 3), // xian_price
            cursor.getShort(offset + 4) != 0, // biao
            cursor.getFloat(offset + 5), // zongjia
            cursor.getInt(offset + 6) // count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ThreeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setXian_price(cursor.getFloat(offset + 3));
        entity.setBiao(cursor.getShort(offset + 4) != 0);
        entity.setZongjia(cursor.getFloat(offset + 5));
        entity.setCount(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ThreeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ThreeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ThreeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
